// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: listens.sql

package db

import (
	"context"
	"time"
)

const createListen = `-- name: CreateListen :exec
INSERT INTO listens (
    id,
    user_id,
    created_at,
    source,
    isrc
) VALUES ($1, $2, $3, $4, $5)
`

type CreateListenParams struct {
	ID        string
	UserID    string
	CreatedAt time.Time
	Source    string
	Isrc      string
}

func (q *Queries) CreateListen(ctx context.Context, arg CreateListenParams) error {
	_, err := q.db.Exec(ctx, createListen,
		arg.ID,
		arg.UserID,
		arg.CreatedAt,
		arg.Source,
		arg.Isrc,
	)
	return err
}

const createSpotifyAccount = `-- name: CreateSpotifyAccount :exec
INSERT INTO spotify_accounts (
    spotify_user_id,
    user_id,
    access_token,
    refresh_token,
    created_at
)  VALUES ($1, $2, $3, $4, $5)
`

type CreateSpotifyAccountParams struct {
	SpotifyUserID string
	UserID        string
	AccessToken   string
	RefreshToken  string
	CreatedAt     time.Time
}

func (q *Queries) CreateSpotifyAccount(ctx context.Context, arg CreateSpotifyAccountParams) error {
	_, err := q.db.Exec(ctx, createSpotifyAccount,
		arg.SpotifyUserID,
		arg.UserID,
		arg.AccessToken,
		arg.RefreshToken,
		arg.CreatedAt,
	)
	return err
}

const getSpotifyAccountsForScanning = `-- name: GetSpotifyAccountsForScanning :many
SELECT spotify_user_id, user_id, access_token, refresh_token, last_scanned, created_at FROM spotify_accounts
`

func (q *Queries) GetSpotifyAccountsForScanning(ctx context.Context) ([]SpotifyAccount, error) {
	rows, err := q.db.Query(ctx, getSpotifyAccountsForScanning)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SpotifyAccount
	for rows.Next() {
		var i SpotifyAccount
		if err := rows.Scan(
			&i.SpotifyUserID,
			&i.UserID,
			&i.AccessToken,
			&i.RefreshToken,
			&i.LastScanned,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
