// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: spotify_accounts.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createSpotifyAccount = `-- name: CreateSpotifyAccount :exec
INSERT INTO spotify_accounts (
    spotify_user_id,
    user_id,
    oauth_token,
    created_at
)  VALUES ($1, $2, $3, $4)
`

type CreateSpotifyAccountParams struct {
	SpotifyUserID string
	UserID        string
	OauthToken    OAuth2Token
	CreatedAt     time.Time
}

func (q *Queries) CreateSpotifyAccount(ctx context.Context, arg CreateSpotifyAccountParams) error {
	_, err := q.db.Exec(ctx, createSpotifyAccount,
		arg.SpotifyUserID,
		arg.UserID,
		arg.OauthToken,
		arg.CreatedAt,
	)
	return err
}

const getSpotifyAccountsForScanning = `-- name: GetSpotifyAccountsForScanning :many
SELECT spotify_user_id, user_id, oauth_token, last_listened_at, created_at FROM spotify_accounts
`

func (q *Queries) GetSpotifyAccountsForScanning(ctx context.Context) ([]SpotifyAccount, error) {
	rows, err := q.db.Query(ctx, getSpotifyAccountsForScanning)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SpotifyAccount
	for rows.Next() {
		var i SpotifyAccount
		if err := rows.Scan(
			&i.SpotifyUserID,
			&i.UserID,
			&i.OauthToken,
			&i.LastListenedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectSpotifyAccountForUpdate = `-- name: SelectSpotifyAccountForUpdate :one
SELECT spotify_user_id, user_id, oauth_token, last_listened_at, created_at FROM spotify_accounts WHERE spotify_user_id = $1 FOR UPDATE
`

func (q *Queries) SelectSpotifyAccountForUpdate(ctx context.Context, spotifyUserID string) (SpotifyAccount, error) {
	row := q.db.QueryRow(ctx, selectSpotifyAccountForUpdate, spotifyUserID)
	var i SpotifyAccount
	err := row.Scan(
		&i.SpotifyUserID,
		&i.UserID,
		&i.OauthToken,
		&i.LastListenedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateSpotifyAccountListenedAt = `-- name: UpdateSpotifyAccountListenedAt :exec
UPDATE spotify_accounts SET last_listened_at = $1 WHERE spotify_user_id = $2
`

type UpdateSpotifyAccountListenedAtParams struct {
	LastListenedAt sql.NullTime
	SpotifyUserID  string
}

func (q *Queries) UpdateSpotifyAccountListenedAt(ctx context.Context, arg UpdateSpotifyAccountListenedAtParams) error {
	_, err := q.db.Exec(ctx, updateSpotifyAccountListenedAt, arg.LastListenedAt, arg.SpotifyUserID)
	return err
}
